<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.app.onestepback.mapper.ArtistPostMapper">
    <select id="selectCountOfPost" resultType="int">
        SELECT COUNT(MEMBER_ID)
        FROM VIEW_ARTIST_POST
        WHERE MEMBER_ID = #{memberId}
          AND POST_STATUS = 'READABLE'
    </select>

    <resultMap id="artistPostListResult" type="ArtistPostListDTO">
        <id property="postId" column="ID"/>
        <result property="artistId" column="MEMBER_ID"/>
        <result property="title" column="POST_TITLE"/>
        <result property="subtitle" column="POST_SUBTITLE"/>
        <result property="content" column="POST_CONTENT"/>
        <result property="category" column="POST_CATEGORY"/>
        <result property="writeTime" column="CREATED_TIME"/>
        <result property="fileName" column="FILE_NAME"/>
        <result property="filePath" column="FILE_PATH"/>
        <result property="nickname" column="MEMBER_NICKNAME"/>
        <result property="kakaoProfileUrl" column="MEMBER_KAKAO_PROFILE_URL"/>
        <result property="profileName" column="MEMBER_PROFILE_NAME"/>
        <result property="profilePath" column="MEMBER_PROFILE_PATH"/>
        <result property="viewCount" column="POST_VIEW_COUNT"/>
        <result property="likeCount" column="LIKE_COUNT"/>
        <result property="replyCount" column="REPLY_COUNT"/>
        <result property="isBookmarked" column="IS_BOOKMARKED"/>
        <collection property="tags" ofType="java.lang.String">
            <result column="POST_TAG_NAME"/>
        </collection>
    </resultMap>

    <select id="selectAll" resultMap="artistPostListResult">
        SELECT P2.ID,
               P2.MEMBER_ID,
               P2.POST_TITLE,
               P2.POST_SUBTITLE,
               P2.POST_CONTENT,
               P2.POST_CATEGORY,
               P2.CREATED_TIME,
               P2.FILE_NAME,
               P2.FILE_PATH,
               T.POST_TAG_NAME,
               P2.MEMBER_NICKNAME,
               P2.MEMBER_KAKAO_PROFILE_URL,
               P2.MEMBER_PROFILE_NAME,
               P2.MEMBER_PROFILE_PATH,
               P2.POST_VIEW_COUNT,
               P2.LIKE_COUNT,
               P2.REPLY_COUNT,
               P2.IS_BOOKMARKED
        FROM (SELECT ROWNUM R,
                     P1.ID,
                     P1.MEMBER_ID,
                     P1.POST_TITLE,
                     P1.POST_SUBTITLE,
                     P1.POST_CONTENT,
                     P1.POST_CATEGORY,
                     P1.CREATED_TIME,
                     P1.FILE_NAME,
                     P1.FILE_PATH,
                     P1.MEMBER_NICKNAME,
                     P1.MEMBER_KAKAO_PROFILE_URL,
                     P1.MEMBER_PROFILE_NAME,
                     P1.MEMBER_PROFILE_PATH,
                     P1.POST_VIEW_COUNT,
                     P1.LIKE_COUNT,
                     P1.REPLY_COUNT,
                     P1.IS_BOOKMARKED
              FROM (SELECT AP.ID,
                           AP.MEMBER_ID,
                           AP.POST_TITLE,
                           AP.POST_SUBTITLE,
                           AP.POST_CONTENT,
                           AP.POST_CATEGORY,
                           AP.CREATED_TIME,
                           COALESCE(F.FILE_NAME, '')                                               AS FILE_NAME,
                           COALESCE(F.FILE_PATH, '')                                               AS FILE_PATH,
                           M.MEMBER_NICKNAME,
                           M.MEMBER_KAKAO_PROFILE_URL,
                           M.MEMBER_PROFILE_NAME,
                           M.MEMBER_PROFILE_PATH,
                           AP.POST_VIEW_COUNT,
                           (SELECT COUNT(L.POST_ID) FROM TBL_POST_LIKE L WHERE L.POST_ID = AP.ID)  AS LIKE_COUNT,
                           (SELECT COUNT(R.POST_ID) FROM TBL_POST_REPLY R WHERE R.POST_ID = AP.ID) AS REPLY_COUNT,
                           CASE
                               WHEN EXISTS(SELECT 1
                                           FROM TBL_BOOKMARKED_ARTIST_POST B
                                           WHERE B.MEMBER_ID = #{viewerId}
                                             AND B.POST_ID = AP.ID) THEN 1
                               ELSE 0
                               END                                                                 AS IS_BOOKMARKED
                    FROM VIEW_ARTIST_POST AP
                             JOIN TBL_MEMBER M ON M.ID = AP.MEMBER_ID
                             LEFT JOIN TBL_POST_FILE F ON F.POST_ID = AP.ID
                    WHERE AP.MEMBER_ID = #{artistId}
                      AND AP.POST_STATUS = 'READABLE'
                      AND (F.ID = (SELECT MIN(F2.ID)
                                   FROM TBL_POST_FILE F2
                                   WHERE F2.POST_ID = AP.ID)
                        OR F.ID IS NULL)
                    ORDER BY AP.ID DESC) P1
              WHERE ROWNUM &lt;= #{pagination.endRow}) P2
                 LEFT JOIN TBL_POST_TAG T ON T.POST_ID = P2.ID
        WHERE P2.R >= #{pagination.startRow}
    </select>

    <insert id="insertPost" parameterType="artistPostRegisterDTO">
        <selectKey keyProperty="postId" order="BEFORE" resultType="Long">
            SELECT SEQ_POST.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO TBL_POST(ID, MEMBER_ID, POST_TITLE, POST_SUBTITLE, POST_CONTENT, POST_CATEGORY, POST_STATUS,
        CREATED_TIME)
        VALUES (#{postId}, #{memberId}, #{title}, #{subtitle}, #{content}, #{category}, 'READABLE', CURRENT_TIMESTAMP)
    </insert>

    <insert id="insertArtistPost">
        INSERT INTO TBL_ARTIST_POST(ID)
        VALUES (#{postId})
    </insert>

    <resultMap id="artistPostDetailMap" type="ArtistPostDetailDTO">
        <id property="postId" column="ID"/>
        <result property="memberId" column="MEMBER_ID"/>
        <result property="title" column="POST_TITLE"/>
        <result property="subTitle" column="POST_SUBTITLE"/>
        <result property="content" column="POST_CONTENT"/>
        <result property="category" column="POST_CATEGORY"/>
        <result property="writeTime" column="CREATED_TIME"/>
        <result property="nickname" column="MEMBER_NICKNAME"/>
        <result property="kakaoProfileUrl" column="MEMBER_KAKAO_PROFILE_URL"/>
        <result property="profileName" column="MEMBER_PROFILE_NAME"/>
        <result property="profilePath" column="MEMBER_PROFILE_PATH"/>
        <result property="blogName" column="ARTIST_BLOG_NAME"/>
        <result property="subscriptionCount" column="SUBSCRIPTION_COUNT"/>
        <result property="viewCount" column="POST_VIEW_COUNT"/>
        <result property="likeCount" column="LIKE_COUNT"/>
        <result property="replyCount" column="REPLY_COUNT"/>
        <result property="previousPostId" column="PREVIOUS_POST_ID"/>
        <result property="previousPostTitle" column="PREVIOUS_POST_TITLE"/>
        <result property="nextPostId" column="NEXT_POST_ID"/>
        <result property="nextPostTitle" column="NEXT_POST_TITLE"/>
        <collection property="tags" ofType="java.lang.String">
            <result column="POST_TAG_NAME"/>
        </collection>
    </resultMap>

    <select id="select" resultMap="artistPostDetailMap">
        SELECT S.ID,
               S.MEMBER_ID,
               S.POST_TITLE,
               S.POST_SUBTITLE,
               S.POST_CONTENT,
               S.POST_CATEGORY,
               S.CREATED_TIME,
               S.POST_TAG_NAME,
               S.MEMBER_NICKNAME,
               S.MEMBER_KAKAO_PROFILE_URL,
               S.MEMBER_PROFILE_NAME,
               S.MEMBER_PROFILE_PATH,
               S.ARTIST_BLOG_NAME,
               S.SUBSCRIPTION_COUNT,
               S.POST_VIEW_COUNT,
               S.LIKE_COUNT,
               S.REPLY_COUNT,
               S.PREVIOUS_POST_ID,
               (SELECT POST_TITLE
                FROM VIEW_ARTIST_POST
                WHERE ID = S.PREVIOUS_POST_ID) AS PREVIOUS_POST_TITLE,
               S.NEXT_POST_ID,
               (SELECT POST_TITLE
                FROM VIEW_ARTIST_POST
                WHERE ID = S.NEXT_POST_ID)     AS NEXT_POST_TITLE
        FROM (SELECT AP.ID,
                     AP.MEMBER_ID,
                     AP.POST_TITLE,
                     AP.POST_SUBTITLE,
                     AP.POST_CONTENT,
                     AP.POST_CATEGORY,
                     AP.CREATED_TIME,
                     T.POST_TAG_NAME,
                     M.MEMBER_NICKNAME,
                     M.MEMBER_KAKAO_PROFILE_URL,
                     M.MEMBER_PROFILE_NAME,
                     M.MEMBER_PROFILE_PATH,
                     A.ARTIST_BLOG_NAME,
                     (SELECT COUNT(S.ARTIST_ID)
                      FROM TBL_SUBSCRIPTION S
                      WHERE S.ARTIST_ID = AP.MEMBER_ID)                                      AS SUBSCRIPTION_COUNT,
                     AP.POST_VIEW_COUNT,
                     (SELECT COUNT(L.POST_ID) FROM TBL_POST_LIKE L WHERE L.POST_ID = AP.ID)  AS LIKE_COUNT,
                     (SELECT COUNT(R.POST_ID) FROM TBL_POST_REPLY R WHERE R.POST_ID = AP.ID) AS REPLY_COUNT,
                     (SELECT MAX(AP1.ID)
                      FROM VIEW_ARTIST_POST AP1
                      WHERE AP1.MEMBER_ID = AP.MEMBER_ID
                        AND AP1.ID &lt; AP.ID
                        AND AP1.POST_STATUS = 'READABLE')                                    AS PREVIOUS_POST_ID,
                     (SELECT MIN(AP2.ID)
                      FROM VIEW_ARTIST_POST AP2
                      WHERE AP2.MEMBER_ID = AP.MEMBER_ID
                        AND AP2.ID > AP.ID
                        AND AP2.POST_STATUS = 'READABLE')                                    AS NEXT_POST_ID
              FROM VIEW_ARTIST_POST AP
                       JOIN TBL_MEMBER M ON M.ID = AP.MEMBER_ID
                       JOIN TBL_ARTIST A ON A.MEMBER_ID = AP.MEMBER_ID
                       LEFT JOIN TBL_POST_TAG T ON T.POST_ID = AP.ID
              WHERE AP.POST_STATUS = 'READABLE'
                AND AP.MEMBER_ID = #{memberId}
                AND AP.ID = #{postId}) S
    </select>

    <select id="selectPrevPost" resultType="artistPostDTO">
        SELECT ID, POST_TITLE, POST_SUBTITLE, FILE_NAME, FILE_PATH
        FROM (SELECT ID,
                     POST_TITLE,
                     POST_SUBTITLE,
                     (SELECT F.FILE_NAME
                      FROM TBL_POST_FILE F
                      WHERE F.POST_ID = A.ID
                        AND F.ID = (SELECT MIN(ID) FROM TBL_POST_FILE WHERE POST_ID = A.ID)) AS FILE_NAME,
                     (SELECT F.FILE_PATH
                      FROM TBL_POST_FILE F
                      WHERE F.POST_ID = A.ID
                        AND F.ID = (SELECT MIN(ID) FROM TBL_POST_FILE WHERE POST_ID = A.ID)) AS FILE_PATH
              FROM VIEW_ARTIST_POST A
              WHERE MEMBER_ID = #{memberId}
                AND A.POST_READABLE != 'DISABLE'
                AND ID &lt; #{id}
              ORDER BY ID DESC)
        WHERE ROWNUM = 1
    </select>

    <select id="selectNextPost" resultType="artistPostDTO">
        SELECT ID, POST_TITLE, POST_SUBTITLE, FILE_NAME, FILE_PATH
        FROM (SELECT ID,
                     POST_TITLE,
                     POST_SUBTITLE,
                     (SELECT F.FILE_NAME
                      FROM TBL_POST_FILE F
                      WHERE F.POST_ID = A.ID
                        AND F.ID = (SELECT MIN(ID) FROM TBL_POST_FILE WHERE POST_ID = A.ID)) AS FILE_NAME,
                     (SELECT F.FILE_PATH
                      FROM TBL_POST_FILE F
                      WHERE F.POST_ID = A.ID
                        AND F.ID = (SELECT MIN(ID) FROM TBL_POST_FILE WHERE POST_ID = A.ID)) AS FILE_PATH
              FROM VIEW_ARTIST_POST A
              WHERE MEMBER_ID = #{memberId}
                AND A.POST_READABLE != 'DISABLE'
                AND ID > #{id}
              ORDER BY ID)
        WHERE ROWNUM = 1
    </select>

    <update id="update">
        UPDATE TBL_POST
        SET POST_TITLE       = #{postTitle},
            POST_SUBTITLE    = #{postSubtitle},
            POST_CONTENT     = #{postContent},
            POST_CATEGORY    = #{postCategory},
            POST_UPDATE_TIME = CURRENT_TIMESTAMP
        WHERE ID = #{id}
    </update>
</mapper>