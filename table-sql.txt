CREATE TABLE TBL_MEMBER
(
    ID                       NUMBER
        CONSTRAINT PK_MEMBER PRIMARY KEY,
    MEMBER_EMAIL             VARCHAR2(50) NOT NULL UNIQUE,
    MEMBER_PASSWORD          VARCHAR2(50),
    MEMBER_NICKNAME          VARCHAR2(20) NOT NULL,
    MEMBER_KAKAO_PROFILE_URL VARCHAR2(255),
    MEMBER_PROFILE_NAME      VARCHAR2(255),
    MEMBER_PROFILE_PATH      VARCHAR2(255),
    MEMBER_INTRODUCTION      VARCHAR2(2000),
    MEMBER_PAYMENT_TOTAL     NUMBER       DEFAULT 0,
    MEMBER_CREATE_TIME       TIMESTAMP    NOT NULL,
    MEMBER_UPDATE_TIME       TIMESTAMP,
    MEMBER_STATUS            VARCHAR2(10) DEFAULT 'ACTIVE'
);

CREATE TABLE TBL_ARTIST
(
    MEMBER_ID          NUMBER       NOT NULL UNIQUE,
    ARTIST_BLOG_NAME   VARCHAR(100) NOT NULL,
    ARTIST_DESCRIPTION VARCHAR2(600),
    BLOG_IMG_NAME      VARCHAR2(255),
    BLOG_IMG_PATH      VARCHAR2(255),
    ARTIST_CREATE_TIME TIMESTAMP    NOT NULL,
    ARTIST_UPDATE_TIME TIMESTAMP,
    CONSTRAINT FK_ARTIST_MEMBER FOREIGN KEY (MEMBER_ID) REFERENCES TBL_MEMBER (ID)
);

CREATE TABLE TBL_SUBSCRIPTION
(
    ARTIST_ID NUMBER NOT NULL,
    MEMBER_ID NUMBER NOT NULL,
    CONSTRAINT FK_SUBSCRIPTION_ARTIST FOREIGN KEY (ARTIST_ID) REFERENCES TBL_ARTIST (MEMBER_ID),
    CONSTRAINT FK_SUBSCRIPTION_MEMBER FOREIGN KEY (MEMBER_ID) REFERENCES TBL_MEMBER (ID)
);

CREATE TABLE TBL_POST
(
    ID               NUMBER
        CONSTRAINT PK_POST PRIMARY KEY,
    MEMBER_ID        NUMBER        NOT NULL,
    POST_TITLE       VARCHAR2(255) NOT NULL,
    POST_SUBTITLE    VARCHAR2(255),
    POST_CONTENT     CLOB          NOT NULL,
    POST_CATEGORY    VARCHAR2(100) NOT NULL,
    POST_VIEW_COUNT  NUMBER        DEFAULT 0,
    POST_READABLE    VARCHAR2(255) DEFAULT 'ACTIVE',
    POST_WRITE_TIME  TIMESTAMP     NOT NULL,
    POST_UPDATE_TIME TIMESTAMP,
    CONSTRAINT FK_POST_MEMBER FOREIGN KEY (MEMBER_ID) REFERENCES TBL_MEMBER (ID)
);

CREATE TABLE TBL_POST_TAG
(
    POST_ID       NUMBER       NOT NULL,
    POST_TAG_NAME VARCHAR2(50) NOT NULL,
    CONSTRAINT FK_TAG_POST FOREIGN KEY (POST_ID) REFERENCES TBL_POST (ID)
);

CREATE TABLE TBL_POST_FILE
(
    ID        NUMBER
        CONSTRAINT PK_POST_FILE PRIMARY KEY,
    POST_ID   NUMBER NOT NULL,
    FILE_NAME VARCHAR2(255),
    FILE_PATH VARCHAR2(255),
    CONSTRAINT FK_FILE_POST FOREIGN KEY (POST_ID) REFERENCES TBL_POST (ID)
);

CREATE TABLE TBL_POST_REPLY
(
    ID            NUMBER
        CONSTRAINT PK_POST_REPLY PRIMARY KEY,
    POST_ID       NUMBER         NOT NULL,
    MEMBER_ID                    NOT NULL,
    REPLY_CONTENT VARCHAR2(1000) NOT NULL,
    CONSTRAINT FK_REPLY_POST FOREIGN KEY (POST_ID) REFERENCES TBL_POST (ID),
    CONSTRAINT FK_REPLY_MEMBER FOREIGN KEY (MEMBER_ID) REFERENCES TBL_MEMBER (ID)
);

CREATE TABLE TBL_POST_LIKE
(
    POST_ID   NUMBER NOT NULL,
    MEMBER_ID NUMBER NOT NULL,
    CONSTRAINT FK_LIKE_POST FOREIGN KEY (POST_ID) REFERENCES TBL_POST (ID),
    CONSTRAINT FK_LIKE_MEMBER FOREIGN KEY (MEMBER_ID) REFERENCES TBL_MEMBER (ID)
);

CREATE TABLE TBL_NOTIFICATION
(
    ID                 NUMBER
        CONSTRAINT PK_NOTIFICATION PRIMARY KEY,
    POST_ID            NUMBER NOT NULL,
    MEMBER_ID          NUMBER NOT NULL,
    NOTIFICATION_CHECK VARCHAR2(10) DEFAULT 'UNREAD',
    CONSTRAINT FK_NOTIFICATION_POST FOREIGN KEY (POST_ID) REFERENCES TBL_POST (ID),
    CONSTRAINT FK_NOTIFICATION_MEMBER FOREIGN KEY (MEMBER_ID) REFERENCES TBL_MEMBER (ID)
);

CREATE TABLE TBL_ARTIST_POST
(
    POST_ID NUMBER
        CONSTRAINT PK_ARTIST_POST PRIMARY KEY,
    CONSTRAINT FK_ARTIST_POST FOREIGN KEY (POST_ID) REFERENCES TBL_POST (ID)
);

CREATE TABLE TBL_BOOKMARKED_ARTIST_POST
(
    POST_ID   NUMBER NOT NULL,
    MEMBER_ID NUMBER NOT NULL,
    CONSTRAINT FK_BOOKMARK_ARTIST_POST FOREIGN KEY (POST_ID) REFERENCES TBL_ARTIST_POST (POST_ID),
    CONSTRAINT FK_BOOKMARK_POST_MEMBER FOREIGN KEY (MEMBER_ID) REFERENCES TBL_MEMBER (ID)
);

CREATE TABLE TBL_VIDEO
(
    POST_ID    NUMBER
        CONSTRAINT PK_VIDEO PRIMARY KEY,
    VIDEO_LINK VARCHAR2(255),
    CONSTRAINT FK_VIDEO_POST FOREIGN KEY (POST_ID) REFERENCES TBL_POST (ID)
);

CREATE TABLE TBL_BOOKMARKED_VIDEO
(
    POST_ID   NUMBER NOT NULL,
    MEMBER_ID NUMBER NOT NULL,
    CONSTRAINT FK_BOOKMARK_VIDEO FOREIGN KEY (POST_ID) REFERENCES TBL_VIDEO (POST_ID),
    CONSTRAINT FK_BOOKMARK_VIDEO_MEMBER FOREIGN KEY (MEMBER_ID) REFERENCES TBL_MEMBER (ID)
);

CREATE TABLE TBL_COMMUNITY_POST
(
    POST_ID NUMBER
        CONSTRAINT PK_COMMUNITY_POST PRIMARY KEY,
    CONSTRAINT FK_COMMUNITY_POST FOREIGN KEY (POST_ID) REFERENCES TBL_POST (ID)
);

CREATE TABLE TBL_BOOKMARKED_COMMUNITY_POST
(
    POST_ID   NUMBER NOT NULL,
    MEMBER_ID NUMBER NOT NULL,
    CONSTRAINT FK_BOOKMARK_COMMUNITY_POST FOREIGN KEY (POST_ID) REFERENCES TBL_COMMUNITY_POST (POST_ID),
    CONSTRAINT FK_BOOKMARK_COMMUNITY_MEMBER FOREIGN KEY (MEMBER_ID) REFERENCES TBL_MEMBER (ID)
);

CREATE TABLE TBL_CROWDFUNDING
(
    ID                    NUMBER
        CONSTRAINT PK_CROWDFUNDING PRIMARY KEY,
    MEMBER_ID             NUMBER         NOT NULL,
    FUNDING_TITLE         VARCHAR2(100)  NOT NULL,
    FUNDING_CONTENT       VARCHAR2(1000) NOT NULL,
    FUNDING_IMG_NAME      VARCHAR2(255),
    FUNDING_IMG_PATH      VARCHAR2(255),
    FUNDING_SUM_COLLECTED NUMBER       DEFAULT 0,
    FUNDING_TARGET_AMOUNT NUMBER         NOT NULL,
    FUNDING_STATUS        VARCHAR2(10) DEFAULT 'ONGOING'
);

CREATE TABLE TBL_FUNDING_PAYMENT
(
    ID                   NUMBER
        CONSTRAINT PK_FUNDING_PAYMENT PRIMARY KEY,
    FUNDING_ID           NUMBER NOT NULL,
    MEMBER_ID            NUMBER NOT NULL,
    FUNDING_AMOUNT_MONEY NUMBER NOT NULL,
    CONSTRAINT FK_PAYMENT_FUNDING FOREIGN KEY (FUNDING_ID) REFERENCES TBL_CROWDFUNDING (ID),
    CONSTRAINT FK_PAYMENT_MEMBER FOREIGN KEY (MEMBER_ID) REFERENCES TBL_MEMBER (ID)
);

CREATE TABLE TBL_FUNDING_REQUEST
(
    ID                      NUMBER
        CONSTRAINT PK_FUNDING_REQUEST PRIMARY KEY,
    MEMBER_ID               NUMBER         NOT NULL,
    WRITER_ID               NUMBER         NOT NULL,
    REQUEST_FUNDING_TITLE   VARCHAR2(100)  NOT NULL,
    REQUEST_FUNDING_CONTENT VARCHAR2(1000) NOT NULL,
    REQUEST_FUNDING_STATUS  VARCHAR2(20) DEFAULT 'REQUESTED',
    CONSTRAINT FK_REQUEST_ARTIST FOREIGN KEY (MEMBER_ID) REFERENCES TBL_ARTIST (MEMBER_ID)
);

CREATE TABLE TBL_INQUIRY
(
    ID                  NUMBER
        CONSTRAINT PK_INQUIRY PRIMARY KEY,
    MEMBER_ID           NUMBER        NOT NULL,
    INQUIRY_TITLE       VARCHAR2(255) NOT NULL,
    INQUIRY_CONTENT     CLOB          NOT NULL,
    INQUIRY_WRITE_TIME  TIMESTAMP     NOT NULL,
    INQUIRY_ANSWER_TIME TIMESTAMP,
    CONSTRAINT FK_INQUIRY_MEMBER FOREIGN KEY (MEMBER_ID) REFERENCES TBL_MEMBER (ID)
);

CREATE TABLE TBL_NOTICE
(
    ID                NUMBER
        CONSTRAINT PK_NOTIVE PRIMARY KEY,
    MEMBER_ID         NUMBER        NOT NULL,
    NOTICE_TITLE      VARCHAR2(255) NOT NULL,
    NOTICE_CONTENT    CLOB          NOT NULL,
    NOTICE_WRITE_TIME TIMESTAMP     NOT NULL,
    CONSTRAINT FK_NOTICE_MEMBER FOREIGN KEY (MEMBER_ID) REFERENCES TBL_MEMBER (ID)
);

CREATE TABLE TBL_SPONSORSHIP
(
    ID                    NUMBER
        CONSTRAINT PK_SPONSORSHIP PRIMARY KEY,
    ARTIST_ID             NUMBER        NOT NULL,
    MEMBER_ID             NUMBER        NOT NULL,
    SPONSOR_NAME          VARCHAR2(255) NOT NULL,
    SPONSOR_EMAIL         VARCHAR2(255) NOT NULL,
    SPONSOR_TEL           VARCHAR2(13)  NOT NULL,
    SPONSORSHIP_MONEY     NUMBER        NOT NULL,
    PAYMENT_STATUS        VARCHAR2(50) DEFAULT 'SUCCESS',
    PAYMENT_TIME          TIMESTAMP     NOT NULL,
    PAYMENT_CANCELED_TIME TIMESTAMP,
    CONSTRAINT FK_SPONSORSHIP_ARTIST FOREIGN KEY (ARTIST_ID) REFERENCES TBL_ARTIST (MEMBER_ID),
    CONSTRAINT FK_SPONSORSHIP_MEMBER FOREIGN KEY (MEMBER_ID) REFERENCES TBL_MEMBER (ID)
);

CREATE OR REPLACE VIEW VIEW_ARTIST_POST AS
(
SELECT *
FROM TBL_POST P
         JOIN TBL_ARTIST_POST A ON P.ID = A.POST_ID
    );

CREATE OR REPLACE VIEW VIEW_VIDEO_POST AS
(
SELECT *
FROM TBL_POST P
         JOIN TBL_VIDEO V ON P.ID = V.POST_ID
    );

CREATE OR REPLACE VIEW VIEW_COMMUNITY_POST AS
(
SELECT *
FROM TBL_POST P
         JOIN TBL_COMMUNITY_POST C ON P.ID = C.POST_ID
    );

CREATE SEQUENCE SEQ_MEMBER;
CREATE SEQUENCE SEQ_POST;
CREATE SEQUENCE SEQ_POST_FILE;

CREATE OR REPLACE FUNCTION GET_SEQ_POST_FILE
    RETURN NUMBER AS
    num NUMBER;
BEGIN
    SELECT SEQ_POST_FILE.nextval
    INTO num
    FROM DUAL;

    RETURN num;
end;